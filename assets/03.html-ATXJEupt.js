import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c as n,a as e,b as a,d as t,e as l}from"./app-_417akz0.js";const c={},d=l('<h2 id="_1-what-diagrams-are-useful" tabindex="-1"><a class="header-anchor" href="#_1-what-diagrams-are-useful" aria-hidden="true">#</a> 1 What Diagrams Are Useful?</h2><div class="hint-container tip"><p class="hint-container-title">Models are wrong</p><p>A common phrase in engineering is &quot;all models are wrong - some are useful&quot;</p><p>This statement indicates that just making a model or diagram does not make it useful and that no model or diagram can be the same exact thing as reality, only a reprentation. Therefore, it is a responsibility to consider what makes a model useful when deciding to create one.</p></div><p>In the software context, some of the most common and useful diagrams are:</p><ul><li><strong>Flowcharts:</strong> Flowcharts are used to represent workflows or processes in a system. They show the steps as boxes of various kinds, and their order by connecting them with arrows. They are often used to depict the logical steps a system should follow from start to finish.</li><li><strong>UML Diagrams:</strong> Unified Modeling Language (UML) is a standardized modeling language used to visualize the design of a system. UML diagrams can represent various aspects of a system, such as class diagrams for structure, sequence diagrams for interactions, and use case diagrams for requirements.</li><li><strong>ER Diagrams:</strong> Entity-Relationship (ER) diagrams are used to model data and how entities relate to each other within a database.</li><li><strong>Sequence Diagrams:</strong> Sequence diagrams show how objects interact with each other in a specific use case of the system. They illustrate how messages and tasks are passed between objects and in what order.</li><li><strong>Architecture Diagrams:</strong> These diagrams provide a high-level view of the system&#39;s structure. They can show how different components of the system interact with each other and with external systems.</li><li><strong>Data Flow Diagrams:</strong> Data flow diagrams show how data moves through a system, where it comes from, where it goes, and how it&#39;s processed.</li><li><strong>Network Diagrams:</strong> Network diagrams are used to represent the interaction between various devices in a network, including the internet, intranet, routers, servers, etc.</li></ul><h2 id="_2-suggestions-for-using-diagrams-for-a-big-picture-view" tabindex="-1"><a class="header-anchor" href="#_2-suggestions-for-using-diagrams-for-a-big-picture-view" aria-hidden="true">#</a> 2 Suggestions for Using Diagrams for a Big Picture View</h2><p>For many software contexts, useful diagrams that could create a big picture view are:</p><ol><li>an overview system architecture (OV1)</li><li>a diagram of the dataflow (context diagram)</li></ol><p>If your application uses business logic or third party code, consider creating an archimate diagram as well.</p><h2 id="_3-tools-for-creating-diagrams" tabindex="-1"><a class="header-anchor" href="#_3-tools-for-creating-diagrams" aria-hidden="true">#</a> 3 Tools for Creating Diagrams</h2><p>Similarly to the grammar context, creating there are many external tools and course to help with creating useful diagrams. We have provided you some background and references to learn more.</p>',10),h={href:"https://www.lucidchart.com/pages/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.drawio.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.microsoft.com/en-us/microsoft-365/powerpoint",target:"_blank",rel:"noopener noreferrer"};function u(f,w){const r=o("ExternalLinkIcon");return i(),n("div",null,[d,e("ul",null,[e("li",null,[e("a",h,[a("Lucidchart"),t(r)]),a(" for making flow charts")]),e("li",null,[e("a",g,[a("Draw.io"),t(r)]),a(" for making flow charts or system level diagrams")]),e("li",null,[e("a",m,[a("Microsoft PowerPoint"),t(r)]),a(" for generating high level system diagrams")])])])}const y=s(c,[["render",u],["__file","03.html.vue"]]);export{y as default};

import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as s,c,a as e,b as t,d as a,w as d,e as h}from"./app-_417akz0.js";const l={},u=h('<h2 id="_1-test-your-documentation" tabindex="-1"><a class="header-anchor" href="#_1-test-your-documentation" aria-hidden="true">#</a> 1 Test your documentation</h2><p>Whether for readability, grammar, or accuracte instructions, reviewing, reading, and testing the documentation by putting yourself in the shoes of the typical reader, you may find inaccuracies.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>&quot;Despite the the fact that the software update was supposed to improve functionality, many users reported experiencing glitches.&quot;</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Read the example sentence above. Do you see any issues?</p></div><details class="hint-container details"><summary>Read it again!</summary><p>Did you catch the repeated word, &quot;the&quot;? It is common that our eyes and minds may skip over mistakes, especially when we are the author of some written content. This includes mistakes like repeated words, grammar issues, or incorrect or omitted technical information.</p></details><h3 id="check-your-work" tabindex="-1"><a class="header-anchor" href="#check-your-work" aria-hidden="true">#</a> Check your work</h3><p>Always read what you write. You may need to go through several iterations before feeling satisfied with the quality. Just like the common practice of code reviews on software teams, consider having another person read your writing to give feedback that may be more difficult for you to catch.</p><p>Strategies for documentation review:</p><ul><li>Read paragraphs backwards, one sentence at a time, to change the flow and potentially catch errors.</li><li>Have a colleague, user, or other individual read the documentation and provide feedback. It is best to have a representative of the target audience do so to make sure the language is understandable for the audience.</li><li>Take action. If you are writing instructions or any documentation that describes actions like application functionality, download instructions, etc, read the instructions and do the action to test that the information is accurate.</li></ul>',10),m={class:"hint-container note"},p=e("p",{class:"hint-container-title"},"Useful Tools",-1),f={href:"https://onlinetexttools.com/find-duplicate-text-words",target:"_blank",rel:"noopener noreferrer"},y=e("br",null,null,-1),w=e("h3",{id:"be-detail-oriented",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#be-detail-oriented","aria-hidden":"true"},"#"),t(" Be detail oriented")],-1),g=e("p",null,"The little things do matter. When reviewing and testing your documentation, pay attention to the little details to make sure content is consistent and accurate.",-1);function _(k,b){const n=o("ExternalLinkIcon"),i=o("RouterLink");return s(),c("div",null,[u,e("div",m,[p,e("p",null,[t("Online tools exist that can identify words used more than once. For example, "),e("a",f,[t("this online text tool"),a(n)]),t(" is one of many ways you can test your own documentation to start to find duplicate words - whether simply repeated as errors or whether to make your documentation simpler as discussed in "),a(i,{to:"/courses/concise/03.html"},{default:d(()=>[t("the Be Concise section")]),_:1}),t(". You could even write your own software script to help you with your documentation!"),y,t(" Also, many times Markdown files or other software files used for documentation do not have built-in checks for written grammar, such as misspellings and duplicate words due to software code not obliging by the same grammar rules. When writing written sentences, consider copying the content into a text editor that does have these features like Word, Google Docs, or others, to identify grammar mistakes before returning to the code copy.")])]),w,g])}const I=r(l,[["render",_],["__file","04.html.vue"]]);export{I as default};
